PROTECTING MXI COMMANDS
=======================

The commands MXI provides can be protected by one of two ways.

(1) Internal Security Table
(2) External Security Manager (eg RACF)

Associated members in this dataset :

o $INSTSEC  - This member
o $ASMSEC   - Sample JCL to assemble and link the sample MXI internal
              security rules table.
o $SECRACF  - Sample JCL to define the RACF profiles
o MXIAUTH   - MXI Macro that defines the security rules
o MXISECTB  - Sample MXI security rules table. This is the source to
              the default MXISECTB shipped with MXI.


***********************************************************************
OPTION (1) - INTERNAL SECURITY
***********************************************************************


Creating The Security Rules Table
=================================

The security rules that can be defined to MXI take the format of a
sequence of assembler statements that use the MXIAUTH macro. These
must be assembled and linked into a load library that is available to
MXI. The security module *MUST* be linked AC(1).

The statements are very easy to code and does not require any extensive
knowledge of the assembler language.


Defining the start of the security rules
----------------------------------------

The first non-comment statement in the security rules member must be
in the following format :

   MXIAUTH START,NOENTRY=(DENY/ALLOW)

This statement is used to specify the start of the table and also to
assign a general access level for any authorised commands that are not
explicitly specifed in the following rules.

For example, the supplied MXISECTB source has the following :

   MXIAUTH START,NOENTRY=DENY


Defining the security rules
---------------------------

The syntax of the statement to define a security rules is as follows :

   MXIAUTH SET,
         CMD=mxicmd_name,
         USER=userid,
         GROUP=group,
         ACCESS=(ALLOW/DENY)

Keywords
--------

   CMD=mxicmd_name
      Specifies the MXI command that is to be protected

   USER=userid
      Identifies the userid pattern mask whose access is to be set.
      This value is matched against the ACEEUSRI field in the ACEE.

      You can use a placeholder character of '%' or a wildcard of '*'
      in the userid field.

      The USER keyword is mutually exclusive with the GROUP keyword.

   GROUP=group
      Identifies the group pattern mask whose access is to be set.
      This value is matched against the ACEEGRPN field in the ACEE.

      You can use a placeholder character of '%' or a wildcard of '*'
      in the group.

      The GROUP keyword is mutually exclusive with the USER keyword.

   ACCESS=(ALLOW/DENY)
      Specifies if access is to be granted (ALLOW) or not (DENY) to
      the specified USER or GROUP.

Examples
--------

(1) Allow members of group SYS1 to use the DYNX command

    MXIAUTH SET,CMD=DYNX,GROUP=SYS1,ACCESS=ALLOW

(2) Allow all users that start 'TECH' to use the "/" command

    MXIAUTH SET,CMD=/,USER=TECH*,ACCESS=ALLOW

(3) Disallow all members of group SYS1 access to the MAKE command apart
    from IBMUSER

    MXIAUTH SET,CMD=MAKE,GROUP=SYS1,ACCESS=DENY
    MXIAUTH SET,CMD=MAKE,USER=IBMUSER,ACCESS=ALLOW

Considerations
--------------

(1) If you continue an MXIAUTH statement over more than one line, you
    must place a continuation character in column 72 and start the next
    line in column 16.

(2) The logic for security checking is fairly basic and is as follows :

    (a)  If entry is not found for the command, the user gets the
         access specified of the NOENTRY keyword.
    (b)  If a entry is found for the command, but no match is found for
         either the USER or GROUP, the access is DENIED.
    (c)  If a entry is found for the command, and an EXACT match for the
         USER is found (ie no '%' or '*' characters), the specified
         access on the rule is given immediately and NO FURTHER RULES
         ARE CHECKED.
    (d)  If a entry is found for the command, and a pattern match for
         USER or any match for the GROUP is found, the access given
         will be as specified on the last matching rule.

Defining the end of the security rules
--------------------------------------

The last non-comment statement in the security rules member must be
in the following format :

   MXIAUTH END

This statement is used to denote the end of the member and calculate
the number of rules defined.


Making The Security Rules Table Available To MXI
=================================================

Before MXI can use the security rules table, it must be assembled and
linked and then placed into a dataset that MXI can use a LOAD macro
to access. The load library *MUST* be APF authorized or in the system
linklist and the MXISECTB load module *MUST* be AC(1).

If MXI detects that the MXISECTB module is not from an authorised
library or is not AC(1), then internal security WILL NOT be used and
MXI will attempt to use external (eg RACF) security.

Assembling and linking
----------------------
Use the sample JCL in member $SECASM to assemble and link the security
rules source. Note that you must include the dataset that contains the
MXIAUTH macro in the SYSLIB for the assemble.

Using the MXISECTB member
-------------------------
Once linked, the MXISECTB member can only be made available to MXI
when placed in either the STEPLIB, JOBLIB or Linklist. The MXISECTB
is only referenced when MXI is running authorised - so there is no
LIBDEF support for this member.


***********************************************************************
OPTION (2) - EXTERNAL SECURITY
***********************************************************************


How MXI Uses RACF
-----------------

MXI only invokes RACF to verify command authorisation when it cannot
find an authorised internal security rules load module (MXISECTB).

If RACF (or similar product) is to be used, MXI will issue a RACROUTE
REQUEST=AUTH request to verify that the user has READ access to a
profile in the FACILITY class of the following form :

    MXICMD.cmd        where 'cmd' is the MXI command verb

Please see the $SECRACF member of the INSTLIB dataset for example JCL
to issue the required RACF commands.


How to Implement External Security
----------------------------------

(1) Examine the $SECRACF member of the INSTLIB dataset and make the
    appropriate changes for your environment. You *will* have to
    make changes to the supplied commands - they are in skeleton
    format.

    Remember to issue the SETROPTS RACLIST(FACILITY) REFRESH command
    after making changes to the RACF profiles.

(2) RENAME the MXISECTB module to MXISECBK and refresh LLA if required.

How to Remove External Security
-------------------------------

(1) Rename MXISECBK to MXISECTB and refresh LLA if required.


