THE MXI TCP/IP SERVER
=====================

MXI can make use of a TCP/IP server address space to direct its commandso
to remote systems and view the corresponding results locally.

Associated members in this dataset :

o $ASMSECX  - JCL to assemble and link MXISECX1
o $INSTTCP  - This member
o $INSTOPT  - Default options (see PORT=).
o $INSTSSI  - Installation instructions for the MXI subsystem
o MXIPMSG   - Mapping macro for TCP/IP input message
o MXISECX1  - Sample TCP/IP security exit
o MXISERV   - Sample started task JCL for the MXISERV program
o MXISRV00  - Sample control cards for the MXISERV program


Installing The MXI TCP/IP Server
================================

The MXI TCP/IP server is activated by running the MXISERV utility with
the "TCPIP=YES" control card. This causes the MXISERV program to act as
a system started task that attaches a TCP/IP socket subtask that sends
and receives data via a specified port (default 8001).

The MXI TCP/IP server can run without APF authorisation and does NOT
require the MXI subsystem in order to function.

The authority to MXI commands is verified on the remote system using the
methodology (internal/RACF) of the remote system. If using RACF security
on the remote system, be aware that it is possible that the local userid
may not exist on the remote system. If this is the case, the user will
be denied access to all of the authorized commands.

Example Server JCL
------------------

    //MXISERV PROC MEMBER=00
    //SERV    EXEC PGM=MXISERV,REGION=64M
    //STEPLIB  DD DISP=SHR,DSN=SYS2.MXI.LOAD
    //SYSIN    DD DISP=SHR,DSN=SYS2.MXI.PARMLIB(MXISRV&MEMBER)
    //SYSTCPD  DD DISP=SHR,DSN=TCPIP.TCPIP.DATA


Related MXISERV Control Cards
-----------------------------

  TCPIP=YES
                Specifies that this invocation of the MXISERV program is
                to act as a started task and a TCP/IP socket server.

                The default is TCPIP=NO.

  NONSWAP=YES/NO
                Specifies whether the started task is to be marked
                non-swappable or not. Having MXISERV as non-swappable
                increases the response time for remote requests.

                The MXISERV program has to be APF authorized if you wish
                to use NONSWAP=YES.

                The default is NONSWAP=NO

  SITE=name(ipaddress)
    or
  SITE=name(hostname)
                Nominates the system name and TCP/IP address of a
                remote OS/390 system.

                As well as nominating the address of the remote system,
                this entry also entitles incoming MXI requests from this
                remote system to be processed by the local system.

                The "name" can be from 1 to 8 characters in length
                and is recommended that you specify the SMF system ID
                for consistancy with MXI displays.

                The "ipaddress" is the TCP/IP address of the remote
                system if you wish to specify it explicitly.

                If you wish to use a DNS server to resolve the TCP/IP
                address from its hostname, use the 'hostname'
                specification on the SITE keyword.

                There is no need to specify the local system to the
                MXI TCP/IP server as this is added automatically at
                startup, however MXISERV can cater for the local
                system being specified if you wish to share the
                MXISRVxx member between systems.

                You can determine the TCP/IP address of your systems
                by either issuing the 'HOMETEST' TSO command or looking
                on the MXI IPL command display (MXI 4.1+).

  CLIENT=mask
                Nominates a TCP/IP address mask that is used to verify
                incoming MXI command requests. The wildcard character
                '*' and placeholder character '%' can be used anywhere
                within the mask.

                For example, to allow all clients whose TCP/IP address
                starts '10.0' to issue remote MXI commands you can
                use either of the following :

                CLIENT=10.0.*
                CLIENT=10.0.*.*

  USERTRAN=username(userid,group)
                Specifies the username translation patterns for non-MVS
                incoming client requests. The incoming username (eg from
                the GetUserName() windows call) is matched against the
                'username' pattern. If a match is found, the request is
                given the authority of MVS 'userid' in 'group'.

                The wildcard character '*' and placeholder character '%'
                can be used in the 'username' field.

                For example, to translate 'SCOTTR' to 'IBMUSER' and all
                other usernames to 'UNKNOWN'.

                USERTRAN=SCOTTR(IBMUSER,SYS1)
                USERTRAN=*(UNKNOWN,UNKNOWN)

                Note that incoming requests from remote MVS systems do
                NOT go through userid translation.

                The maximum length of the incoming username is 17
                characters. Userid and Group have a max length of 8.

  TRUSTED=YES/NO
                Specifies if the TCP/IP address of the incoming request
                is to be verified.

                Specifying TRUSTED=NO means that ONLY those sites that
                are specified by SITE or CLIENT keywords can be the
                source TCP/IP address for incoming requests.

                Specifying TRUSTED=YES means that no TCP/IP address
                verification takes place.

                The default is TRUSTED=NO

  MSGLEVEL=LOUD/QUIET
                Specifies the level of messages issued by the MXI
                TCP/IP server.

                LOUD   -  All possible messages are issued
                QUIET  -  Only important informational and error
                          messages are issued.

                The default is MSGLEVEL=LOUD.

Example MXISERV Control Cards
-----------------------------

Assume that the local system (TEST) wants to communicate with the
PROD system (123.45.67.89) and the DEVL system (234.56.78.90). It also
needs to communicate with SYSA which is known to the local DNS server as
MY390SYSA.COM.

The required control cards would be

  TCPIP=YES
  MSGLEVEL=QUIET
  SITE=PROD(123.45.67.89)
  SITE=DEVL(234.56.78.90)
  SITE=SYSA(MY390SYSA.COM)


Starting the MXI TCP/IP Server
------------------------------

Copy the sample MXISERV JCL to your PROCLIB dataset and customise
to suit your local standards. Pay particular attention to the SYSTCPD
DDname specification and make sure that it matches the one specified in
the system TCPIP started task JCL.

Copy the sample MXISRV00 member to a PARMLIB dataset and customise
to suit your local standards and site names/addresses.

Issue MVS command : "S MXISERV"


Available Modify Commands
-------------------------

One added benefit of running the MXI TCP/IP server address space is the
ability to issue MXI commands from the system console.

To issue an MXI command, all you have to do is isse a modify command
to the MXI TCP/IP server specifying the required MXI command. The
response to the MXI command will be issued back to the console.

Examples :  "F MXISERV,SGRP"
            "F MXISERV,EXC"
            "F MXISERV,DASD MVS*"
            "F MXISERV,DEV RESP(5)"


Stopping the MXI TCP/IP Server
------------------------------

Issue MVS command : "P MXISERV"

Notes
(1) Certain commands are disabled when issued to remote systems. These
    include the point-and-shoot actions against datasets, VTOC dataset
    lists and the SRCH command.

(2) Ensure that the USERID associated with the MXISERV started task has
    an OMVS segment.



***************************************************************
* WARNING - THE FOLLOWING SECTION IS WORK IN PROGRESS         *
*                                                             *
* IF ENOUGH PEOPLE SHOW INTEREST IN THIS I WILL EXPAND THE    *
* DOCUMENTATION                                               *
*                                                             *
***************************************************************


Communicating With The MXI TCP/IP Server From Your Own Application
==================================================================

Associated members in this dataset :

o MXCOLOR   - Attribute bytes
o MXIS      - MXI Result Set Attributes Mapping Macro
o MXDT      - MXI Result Set Header Mapping Macro

Any application can communicate with the MXI TCP/IP server as long as
the format of the input and output messages are adherred to.

For convenience I have included the assembler mapping macros in the
INSTLIB dataset. Unfortunately it is up to you to convert these to the
programming language structures of your choice. I am not either a Java
or C++ programmer.

I will briefly outline the tasks that your application must perform and
I will explain the layout of the input and output messages.

Issuing an MXI command to the MXI TCP/IP Server
-----------------------------------------------

Your application must perform all required TCP/IP actions to bind to
the socket used by the MXI TCP/IP server. It must then send a message
to the MXI TCP/IP server. This message contains the MXI command that
is to be executed. After processing the passed command, the MXI TCP/IP
server will send a variable length reply message which your application
must read to get the response.

Currently MXI expects ALL input data to be in EBCDIC and it will also
return all output data in EBCDIC. You must NOT globally translate the
returned data from EBCDIC to ASCII - otherwise attribute characters,
control flags and length fields will be corrupted.

Required Input Information
--------------------------
(1)  The TCP/IP address of the host of the target MXI TCP/IP server.
(2)  The TCP/IP port number in use by the target MXI TCP/IP server.
(3)  A Userid and Group name to use for command authority checking.
     Note : For non-MVS clients, you need to supply the userid which can
     be up to 17 bytes long.
(4)  The MXI command you wish to issue.

Input Message Format (MVS)
--------------------------

Offset   Description     Length  Type
------   -----------     ------  ----
0        Command Length  1       Binary
1        Command         71      Character (pad to right with spaces)
72       Reserved        56      Character (init to spaces)
128      Userid Length   1       Binary
129      Userid          8       Character
137      Group Length    1       Binary
138      Group Name      8       Character
146      MQ SSID         4       Character (optional)
150      DB2 SSID        4       Character (optional)
154      Operating Sys   8       Character (Set to 'MVS')
162      User Data       32      Character (installation use)

Input Message Format (non-MVS)
------------------------------

Offset   Description     Length  Type
------   -----------     ------  ----
0        Command Length  1       Binary
1        Command         71      Character (pad to right with spaces)
72       Reserved        56      Character (init to spaces)
128      Userid Length   1       Binary
129      Userid          17      Character
146      MQ SSID         4       Character (optional)
150      DB2 SSID        4       Character (optional)
154      Operating Sys   8       Character (Eg 'WINDOWS')
162      User Data       32      Character (Installation use)

For example, a message to send the command 'DA CICS*' would look as
follows (in assembler language) assuming that IBMUSER is used as the
auth check userid.

  COMMANDL DC  X'08'
  COMMAND  DC  CL71'DA CICS*'
           DC  CL56' '
  USERIDL  DC  X'07'
  USERID   DC  CL8'IBMUSER'
  GROUPL   DC  X'04'
  GROUP    DC  CL8'SYS1'
  MQSSID   DC  CL4'CSQ1'
  DBSSID   DC  CL4'DSN1'
  OS       DC  CL8'MVS'
  USERDATA DC  CL32' '

TCP/IP Server Security Exit
---------------------------

The presense of the MXISECX1 load module in the normal module search
order will activate an exit point that is taken for each incoming MXI
TCP/IP request.

The exit gets control BEFORE any verification of TCP/IP addresses or
userid translation.

The parameter list passed to the exit points to both the client TCP/IP
address and the actual incoming message.

The exit can alter any fields within the incoming message.

A return code of zero allows the incoming message to proceed, a non-zero
return code will cause MXISERV to reject the request.

A sample MXISECX1 exit is supplied that includes code that performs a
RACF userid/password check for incoming messages. Please see the
comments in the code for further info.


Output Message Format
---------------------

If the MXI command has failed, the MXI TCP/IP server returns
a message in the following format :

Offset   Description     Length  Type
------   -----------     ------  ----
0        MSG eyecatch    4       Character = 'MSG '
4        Short Message   24      Character
28       Long Message    70      Character


If the MXI command has been successful, the MXI TCP/IP server returns
a message in the following format :

Offset   Description     Length  Type
------   -----------     ------  ----
0        MXIS            696     Structure mapped by the MXIS mapping
                                 macro
696      MXDT            256     Structure mapped by the MXDT mapping
                                 macro
952      Result Set      n*80    Array of 80-byte records. The number
                                 of records returned is indicated in
                                 the MXDT structure.

Testing for the presence of 'MXIS' in the first 4 bytes of the returned
message indicates that the command was issued correctly.

Within the array of 80-byte records, the attribute bytes contained in
the mapping macro 'MXCOLOR' can be used to identify certain sections and
fields within the results.

For result sets that are tabular in nature (eg the output from "DA *"),
there is associated meta-data in the MXIS that describes each column
in the display - see the MXISSFn entries.

I have provided the listing of the MXISOCKC program which is used by
MXI as the TCP/IP socket client. Note that this is supplied as an
example of the program logic only and it will NOT assemble as internal
MXI macros are not supplied.

MXISOCKC TITLE 'MXI TCP/IP Socket Client'
*-------------------------------------------------------------------*
* Name            : MXISOCKC
*
* Function        : TCP/IP Socket Client
*
* Register Usage  :
* r1  - parameter passed : +0  TCP/IP Address
*                          +4  Port Number
*                          +8  Command
*                          +C  Answer Area
*                          +10 User info
*                          +14 Return Code Area
* r2  -
* r3  - TCP/IP address
* r4  - Port Number
* r5  - Command
* r6  - Answer Area
* r7  - User Information
* r8  -
* r9  - MXIPMSG
* r10 - 3rd base
* r11 - 2nd base
* r12 - base
* r13 - work area
*
*-------------------------------------------------------------------*
MXISOCKC CSECT
MXISOCKC AMODE 31
MXISOCKC RMODE 24
         BAKR  R14,R0                 linkage stack
         LR    R12,R15                copy entry address to base
         USING MXISOCKC,R12           address it
         EYECATCH DATE=2003/01/16,VERSION=MXI.4.3
         LA    R11,4095(,R12)         Establish 2nd
         LA    R11,1(,R11)
         USING MXISOCKC+4096,R11
         LA    R10,4095(,R11)         Establish 3rd
         LA    R10,1(,R10)
         USING MXISOCKC+8192,R10
         LR    R2,R1                  copy parms passed
GETSTOR  MXILABEL
         STORAGE OBTAIN,              get the workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            put address in r13               X
               SP=0,KEY=8,                                             X
               LOC=BELOW,             below the line                   X
               COND=NO                unconditional
         USING WORKAREA,R13           address workarea
         LR    R14,R13                Copy workarea address
         L     R15,=A(WORKLEN)        Get length of workarea
         XR    R0,R0                  Clear
         XR    R1,R1                  Clear
         MVCL  R14,R0                 Init to zeros
         MVC   4(4,R13),=C'F1SA'      set acronym
         L     R1,=V(MXIOPTN)         Get the MXI Gloabl options
         USING MXOP,R1                Address MXOP
         ICM   R15,B'1111',MXOPMROW   Get max rows
         XR    R14,R14                Clear
         M     R14,=F'80'             x 80
         LA    R15,MXISLEN(,R15)      Add length of MXIS
         LA    R15,MXDTHSZ(,R15)      Add header size of MXDT
         ST    R15,ANSWERL            Store as answer length
GETPARMS MXILABEL
         LM    R3,R8,0(R2)            get parms
         LA    R9,THISMSG             point to input message
         USING MXIPMSG,R9             Address it
         MVC   IPADDR(4),0(R3)        Copy IP Address (Binary)
         MVC   PORTNO(2),0(R4)        Copy port number (binary)
         MVC   MXIPCMDL(128),0(R5)    Copy MXI Command (1st 72 bytes)
         MVC   @ANSWER,0(R6)          Store answer area
         MVC   @ANSLEN(4),ANSWERL     Store answer length
         MVC   @USER,0(R7)            Copy user info
         MVC   @RC,0(R8)              Copy rc information
         L     R1,@USER
         MVC   MXIPUSRL(26),0(R1)     Move user+group+mq+db
         MVC   MXIPOS(8),=CL8'MVS'    Indicate MVS
         XC    MXIPUDAT(32),MXIPUDAT  Clear user data
         L     R1,@RC                 Get userid info
         LTR   R1,R1                  Any RC area ?
         BZ    INITAPI                No
         OI    STATUS,HAVERC          indicate
         XC    0(16,R1),0(R1)         Clear rc area
INITAPI  MXILABEL
*-------------------------------------------------------------------*
* Init the TCP/IP API
*-------------------------------------------------------------------*
         MVC   CALLTYPE(8),=CL8'INITAPI'
         EZASMI TYPE=INITAPI,                                          X
               SUBTASK=TASKID,                                         X
               MAXSOC=MAXSOC,                                          X
               MAXSNO=MAXSNO,                                          X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               APITYPE=APITYPE,                                        X
               ASYNC=('NO'),                                           x
               ERROR=ERRHANDL,                                         X
               MF=(E,INITAPI1)
         CLC   TCPRC,=F'0'            Test RC
         BE    SOCKET                 All OK - get SOCKET
INITRC   MXILABEL
*-------------------------------------------------------------------*
* Init failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=TCPRC,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=100,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
SOCKET   MXILABEL
*-------------------------------------------------------------------*
* Get the socket descriptor
*-------------------------------------------------------------------*
         MVC   CALLTYPE(8),=CL8'SOCKET'
         EZASMI TYPE=SOCKET,                                           X
               AF='INET',                                              X
               SOCTYPE='STREAM',                                       X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,SOCKET1)
         CLC   TCPRC,=F'-1'           Error
         BNE   GETHOST
SOCKRC   MXILABEL
*-------------------------------------------------------------------*
* SOCKET failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=TCPRC,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=111,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
GETHOST  MXILABEL
*-------------------------------------------------------------------*
* Store the socket descriptor and get the host id
*-------------------------------------------------------------------*
         ICM   R15,B'1111',TCPRC       Get the SOCKET descriptor
         STH   R15,SOCKDESC            And store for later
         EZASMI TYPE=GETHOSTID,                                        X
               ERRNO=ERRNO,                                            X
               RETCODE=HOSTIP,                                         X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,GETHOST1)
         CLC   HOSTIP,=F'-1'           Error
         BE    HOSTRC
         B     BIND
HOSTRC   MXILABEL
*-------------------------------------------------------------------*
* GETHOSTID failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=HOSTIP,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=112,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
BIND     MXILABEL
*-------------------------------------------------------------------*
* BIND the socket
*-------------------------------------------------------------------*
         MVC   HOSTFAM(2),=H'2'        Set family
         MVC   HOSTPORT(2),PORTNO      Set port
         MVC   CALLTYPE(8),=CL8'BIND'
         EZASMI TYPE=BIND,                                             X
               S=SOCKDESC,                                             X
               NAME=BINDPARM,                                          X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,BIND1)
CONNECT  MXILABEL
*-------------------------------------------------------------------*
* CONNECT to the socket
*-------------------------------------------------------------------*
         MVC   FAMILY(2),=H'2'
         MVC   CALLTYPE(8),=CL8'CONNECT'
         EZASMI TYPE=CONNECT,                                          X
               S=SOCKDESC,                                             X
               NAME=CONNPARM,                                          X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,CONNECT1)
         CLC   TCPRC,=F'-1'           Error
         BE    CONNRC
         B     GETPEER
CONNRC   MXILABEL
*-------------------------------------------------------------------*
* CONNECT failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=TCPRC,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=101,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
GETPEER  MXILABEL
*-------------------------------------------------------------------*
* Get the PEER name
*-------------------------------------------------------------------*
         MVC   CALLTYPE(8),=CL8'GETPEER'
         EZASMI TYPE=GETPEERNAME,                                      X
               S=SOCKDESC,                                             X
               NAME=CONNPARM,                                          X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,GETPEER1)
         CLC   TCPRC,=F'-1'           Error
         BE    GETPRC
         B     SEND
GETPRC   MXILABEL
*-------------------------------------------------------------------*
* GETPEERNAME failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=TCPRC,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=102,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
SEND     MXILABEL
*-------------------------------------------------------------------*
* SEND the message to MXISERV
*  - This may take more than one iteration
*-------------------------------------------------------------------*
         XR    R15,R15
         IC    R15,MXIPCMDL
         L     R15,=AL4(MXIPMSGL)    get length to send
         STCM  R15,B'1111',COMMANDL
         LA    R6,MXIPCMDL           Point to buffer
         MVC   CALLTYPE(8),=CL8'WRITE'
SENDIT   EZASMI TYPE=WRITE,                                            X
               S=SOCKDESC,                                             X
               NBYTE=COMMANDL,                                         X
               BUF=(R6),                                               X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,WRITE1)
         CLC   TCPRC,=F'-1'           Error
         BE    SENDRC
         CLC   TCPRC,=F'0'            End of data
         BE    SHUTTO                 Yep
         L     R1,COMMANDL            Calculate how much was sent
         S     R1,TCPRC
         ST    R1,COMMANDL            And indicate remainder length
         CLC   COMMANDL(4),=F'0'      All done ?
         BE    SHUTTO                 Yes
         A     R6,TCPRC               No - adjust input buffer pointer
         B     SENDIT                 and send the rest
SENDRC   MXILABEL
*-------------------------------------------------------------------*
* WRITE failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=TCPRC,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=103,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
SHUTTO   MXILABEL
         MVC   SHUTHOW,=F'1'         Shutdown TO
         MVC   CALLTYPE(8),=CL8'SHUTTO'
         EZASMI TYPE=SHUTDOWN,                                         X
               S=SOCKDESC,                                             X
               HOW=SHUTHOW,                                            X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,SHUTDOW1)
         CLC   TCPRC,=F'0'
         BE    READ
SHTTRC   MXILABEL
*-------------------------------------------------------------------*
* SHUTTO failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=TCPRC,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=104,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
READ     MXILABEL
*-------------------------------------------------------------------*
* READ the response from MXISERV
*-------------------------------------------------------------------*
         L     R6,@ANSWER             Point to answer area
         MVC   CALLTYPE(8),=CL8'READ'
READIT   EZASMI TYPE=READ,                                             X
               S=SOCKDESC,                                             X
               NBYTE=@ANSLEN,                                          X
               BUF=(R6),                                               X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,READ1)
         CLC   TCPRC,=F'-1'           Error
         BNE   READOK
READRC   MXILABEL
*-------------------------------------------------------------------*
* READ failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=TCPRC,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=114,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
READOK   CLC   TCPRC,=F'0'
         BE    SHUTFROM
         AL    R6,TCPRC              Adjust answer area pointer
         L     R1,@ANSLEN            Get max answer length
         S     R1,TCPRC              Subtrace amount received
         ST    R1,@ANSLEN            Store as length to get
         B     READIT                Read next chunk
SHUTFROM MXILABEL
         L     R6,@ANSWER            Get answer area
         CLC   0(4,R6),=CL4'MXIS'    Is this an MXIS ?
         BNE   NOMXIS                No
         LA    R1,MXISLEN(,R6)       Adjust address in MXISDTAB
         ST    R1,MXISDTAB-MXIS(R6)
NOMXIS   MVC   SHUTHOW,=F'0'         Shutdown FROM
         MVC   CALLTYPE(8),=CL8'SHUTFROM'
         EZASMI TYPE=SHUTDOWN,                                         X
               S=SOCKDESC,                                             X
               HOW=SHUTHOW,                                            X
               ERRNO=ERRNO,                                            X
               RETCODE=TCPRC,                                          X
               REQAREA=REQAREA,                                        X
               ERROR=ERRHANDL,                                         X
               MF=(E,SHUTDOW1)
         CLC   TCPRC,=F'0'
         BE    RETURNCC
SHTFRC   MXILABEL
*-------------------------------------------------------------------*
* SHUTFROM failed - issue message
*-------------------------------------------------------------------*
         MVI   MSG1OVRL,8
         MVI   MSG1OVRO,40
         MXICALL RDSX2C,LAP1=4,LAP2=TCPRC,LAP3=MSG1OVRT
         MVI   MSG2OVRL,8
         MVI   MSG2OVRO,56
         MXICALL RDSX2C,LAP1=4,LAP2=ERRNO,LAP3=MSG2OVRT
         TM    STATUS,HAVERC
         BO    ERRHANDL
         MXICALL MXIERWTO,LAP1=105,LAP2=MSG1OVRL,LAP3=MSG2OVRL,LAP4=0
         B     ERRHANDL
RETURNCC MXILABEL
         MVC   CALLTYPE(8),=CL8'TERMAPI'
         EZASMI TYPE=TERMAPI,                                          x
               ERROR=ERRHANDL,                                         X
               MF=(E,TERMAPI1)
RELSTOR  STORAGE RELEASE,             release workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            put address in r13               X
               SP=0,KEY=8,                                             X
               COND=NO                unconditional
         XR    R15,R15
         PR                           return
*
*
ERRHANDL MXILABEL
         TM    STATUS,HAVERC          Have RC ?
         BNO   RELSTOR                No - quit
         L     R1,@RC                 Get RC area
         MVC   0(8,R1),CALLTYPE       Indicate call type
         MVC   8(4,R1),TCPRC          Copy RC
         MVC   12(4,R1),ERRNO         And ERRNO
         B     RELSTOR
*-------------------------------------------------------------------*
* Constants
*-------------------------------------------------------------------*
MOVERFR1 MVC   0(0,R15),0(R1)
BLANKS   DC    CL80' '
MASK     DC    XL8'4020202020202120'
TASKID   DC    CL8'MXISOCKC'
MAXSOC   DC    H'50'                  MAXSOC PARM VALUE
APITYPE  DC    H'2'
KWLISTST DC    AL1(9),CL9'0LISTSITE'
*-------------------------------------------------------------------*
* DSECTS
*-------------------------------------------------------------------*
WORKAREA DSECT
         MXIWORKA
R14SAVE1 DS    F
R14SAVE2 DS    F
FWORK    DS    F
MAXSNO   DS    F                      (HIGHEST SOCKET DESC AVAILABLE)
@ANSLEN  DS    F
@ANSWER  DS    F
@USER    DS    F
@RC      DS    F
@MXIPARM DS    F
         DS    0D
DWORK    DS    D
UWORKLEN DS    X
UWORK    DS    CL32
TEXTADDR DS    CL32
         DS    0D
CALLTYPE DS    CL8
TCPPARMS DS    0H
PORTPARM DS    H
         DS    0D
THISMSG  DS    CL(MXIPMSGL)
         DS    0D
COMMANDL DS    F
CONNPARM DS    0H
FAMILY   DS    H
PORTNO   DS    H
IPADDR   DC    AL1(0),AL1(0),AL1(0),AL1(0) Internet Address
         DS    2D
         DS    H
ADDRESS  DC    F'0'
         DC    XL8'00'
BINDPARM DS    0H
HOSTFAM  DS    H
HOSTPORT DS    H
HOSTIP   DC    AL1(0),AL1(0),AL1(0),AL1(0) Internet Address
         DS    2D
BACKLOG  DS    F
TCPRC    DS    F
SOCKDESC DS    H
THISSOCK DS    H
SHUTHOW  DS    F
ERRNO    DS    F
STATUS   DS    X
HAVERC   EQU   X'80'
         DS    0F
MSG1OVRL DS    X
MSG1OVRO DS    X
MSG1OVRT DS    CL80
         DS    0F
MSG2OVRL DS    X
MSG2OVRO DS    X
MSG2OVRT DS    CL80
         DS    0D
EZASMGW  EZASMI TYPE=GLOBAL,      Storage definition for GWA           X
               STORAGE=CSECT
         DS    0D
         EZASMI TYPE=TASK,STORAGE=CSECT
         DS    0D
*
REQAREA  DS    XL100
ANSWERL  DS    F
         DS    0D
INITAPI1 EZASMI TYPE=INITAPI,MF=L
SOCKET1  EZASMI TYPE=SOCKET,MF=L
GETHOST1 EZASMI TYPE=GETHOST,MF=L
BIND1    EZASMI TYPE=BIND,MF=L
LISTEN1  EZASMI TYPE=LISTEN,MF=L
CONNECT1 EZASMI TYPE=CONNECT,MF=L
WRITE1   EZASMI TYPE=WRITE,MF=L
GETPEER1 EZASMI TYPE=GETPEERNAME,MF=L
ACCEPT1  EZASMI TYPE=ACCEPT,MF=L
READ1    EZASMI TYPE=READ,MF=L
CLOSE1   EZASMI TYPE=CLOSE,MF=L
TERMAPI1 EZASMI TYPE=TERMAPI,MF=L
SHUTDOW1 EZASMI TYPE=SHUTDOWN,MF=L
BUFFER   DS    CL4096
WORKLEN  EQU   *-WORKAREA
*
         MXCT
         MXDT
         MXIS
         MXIPMSG
         MXOP
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
